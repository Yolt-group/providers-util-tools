apiVersion: apps/v1
kind: Deployment
metadata:
  name: clients
  labels:
    team: yts-clients
    git.yolt.io/group: backend
    git.yolt.io/project: clients
    git.yolt.io/tag: $(TAG)
    yolt.io/config-server-tag: $(CONFIG_SERVER_TAG)
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      name: clients
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        team: yts-clients
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8444"
        prometheus.io/scheme: "https"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-run-as-same-user: "true"
        vault.hashicorp.com/agent-revoke-on-shutdown: "true"
        # Set how long the preStop of the Vault-agent should wait before terminating
        # agent-revoke-grace := terminationGracePeriodSeconds + 5 seconds
        vault.hashicorp.com/agent-revoke-grace: "185"
        vault.hashicorp.com/role: "clients"
        vault.hashicorp.com/agent-cache-enable: "true"
        vault.hashicorp.com/agent-pre-populate: "true"
        vault.hashicorp.com/secret-volume-path: "/vault/secrets"
        vault.hashicorp.com/auth-path: "auth/$(ENVIRONMENT)/k8s/eks/pods/$(NAMESPACE)"
        vault.hashicorp.com/agent-limits-cpu: "1000m"
        vault.hashicorp.com/agent-limits-mem: "128Mi"
        vault.hashicorp.com/agent-requests-cpu: "10m"
        vault.hashicorp.com/agent-requests-mem: "24Mi"
        vault.hashicorp.com/agent-inject-secret-rds: $(ENVIRONMENT)/database/rds/creds/clients
        vault.hashicorp.com/agent-inject-secret-kafka_private_key: ""
        vault.hashicorp.com/agent-inject-template-kafka_private_key: |
          {{ with secret "$(ENVIRONMENT)/kafka/issue/clients" "common_name=clients" }}
          {{- .Data.private_key -}}
          {{ end }}
        vault.hashicorp.com/agent-inject-secret-kafka_issuing_ca: ""
        vault.hashicorp.com/agent-inject-template-kafka_issuing_ca: |
          {{ with secret "$(ENVIRONMENT)/kafka/issue/clients" "common_name=clients" }}
          {{- .Data.issuing_ca -}}
          {{ end }}
        vault.hashicorp.com/agent-inject-secret-kafka_cert: ""
        vault.hashicorp.com/agent-inject-template-kafka_cert: |
          {{ with secret "$(ENVIRONMENT)/kafka/issue/clients" "common_name=clients" }}
          {{- .Data.certificate -}}
          {{ end }}
        vault.hashicorp.com/agent-inject-secret-cert: "$(ENVIRONMENT)/k8s/pods/$(NAMESPACE)/pki/issue/clients"
        vault.hashicorp.com/agent-inject-template-cert: |
          {{ with secret "$(ENVIRONMENT)/k8s/pods/$(NAMESPACE)/pki/issue/clients" "common_name=clients" }}
          {{- .Data.certificate -}}
          {{ end }}
        vault.hashicorp.com/agent-inject-secret-private_key: "$(ENVIRONMENT)/k8s/pods/$(NAMESPACE)/pki/issue/clients"
        vault.hashicorp.com/agent-inject-template-private_key: |
          {{ with secret "$(ENVIRONMENT)/k8s/pods/$(NAMESPACE)/pki/issue/clients" "common_name=clients" }}
          {{- .Data.private_key -}}
          {{ end }}
        vault.hashicorp.com/agent-inject-secret-issuing_ca: "$(ENVIRONMENT)/k8s/pods/$(NAMESPACE)/pki/issue/clients"
        vault.hashicorp.com/agent-inject-template-issuing_ca: |
          {{ with secret "$(ENVIRONMENT)/k8s/pods/$(NAMESPACE)/pki/issue/clients" "common_name=clients" }}
          {{- .Data.issuing_ca -}}
          {{ end }}
        vault.hashicorp.com/agent-inject-command-cert: "openssl pkcs12 -export -in /vault/secrets/cert -inkey /vault/secrets/private_key -out /vault/secrets/keystore.p12 -name keystore -passout pass:dontchangeit"
        vault.hashicorp.com/agent-inject-command-private_key: "openssl pkcs12 -export -in /vault/secrets/cert -inkey /vault/secrets/private_key -out /vault/secrets/keystore.p12 -name keystore -passout pass:dontchangeit"
        vault.hashicorp.com/agent-inject-secret-aws: aws
        vault.hashicorp.com/agent-inject-template-aws: |
          {{- with secret "aws/creds/$(ENVIRONMENT)-k8s-pod-email-sender" -}}
          [default]
          region=eu-central-1
          aws_access_key_id={{ .Data.access_key }}
          aws_secret_access_key={{ .Data.secret_key }}
          aws_session_token={{ .Data.security_token }}
          {{- end -}}
        vault.hashicorp.com/agent-inject-secret-aws_qseal: ""
        vault.hashicorp.com/agent-inject-template-aws_qseal: |
          {{- with secret "aws/creds/$(ENVIRONMENT)-qseal-write" -}}
          [default]
          region=eu-central-1
          aws_access_key_id={{ .Data.access_key }}
          aws_secret_access_key={{ .Data.secret_key }}
          aws_session_token={{ .Data.security_token }}
          {{- end -}}
        vault.hashicorp.com/client-max-retries: "4"
        ca-certificates.yolt.io/inject: "true"
    spec:
      initContainers:
        - name: wait-for-config-server
          image: $(DOCKER_REGISTRY)/clients:$(DOCKER_TAG)
          command: [sh, -c, 'until $(curl --connect-timeout 2 --output /dev/null --silent --head --fail https://config-server/config-server/actuator/health); do echo waiting for config-server; sleep 2; done;']
          resources:
            requests:
              memory: 50Mi
              cpu: 10m
            limits:
              memory: 150Mi
      containers:
        - image: $(DOCKER_REGISTRY)/clients:$(DOCKER_TAG)
          name: clients
          lifecycle:
            preStop:
              exec:
                command: [sh, -c, sleep 10]
          securityContext:
            runAsNonRoot: true
            runAsUser: 100
            runAsGroup: 1000
          ports:
            - containerPort: 8443
          envFrom:
            - configMapRef:
                name: kafka
          env:
            - name: SPRING_CLOUD_CONFIG_ENABLED
              value: 'true'
            - name: SPRING_PROFILES_ACTIVE
              value: $(ENVIRONMENT),$(NAMESPACE),$(ENVIRONMENT)-$(NAMESPACE)
            - name: SPRING_CLOUD_CONFIG_LABEL
              value: $(CONFIG_SERVER_TAG)
          livenessProbe:
            httpGet:
              path: actuator/health/liveness
              port: 8444
              scheme: HTTPS
            initialDelaySeconds: 180
            timeoutSeconds: 6
          resources:
            requests:
              cpu: 20m
              memory: 430Mi
          readinessProbe:
            httpGet:
              path: actuator/health/readiness
              port: 8444
              scheme: HTTPS
            initialDelaySeconds: 30
            timeoutSeconds: 6
            failureThreshold: 1
          volumeMounts:
            - mountPath: /tmp/yolt
              name: vault-kafka-volume
      volumes:
        - name: vault-kafka-volume
          emptyDir: {}
      terminationGracePeriodSeconds: 180
      serviceAccountName: clients
      securityContext:
        runAsUser: 100
        runAsGroup: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: name
                      operator: In
                      values:
                        - clients
                topologyKey: topology.kubernetes.io/zone
